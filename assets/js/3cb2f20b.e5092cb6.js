"use strict";(self.webpackChunkpayangel_api_docs=self.webpackChunkpayangel_api_docs||[]).push([[967],{887:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var t=a(758);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},9218:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/java/examples","title":"Java Code Examples","description":"This section provides examples of how to use the PayAngel API with Java.","source":"@site/docs/api/java/examples.md","sourceDirName":"api/java","slug":"/api/java/examples","permalink":"/payangel-api-docs/docs/api/java/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/payincgroupltd/payangel-api-docs/tree/main/docs/api/java/examples.md","tags":[],"version":"current","frontMatter":{"id":"examples","title":"Java Code Examples","sidebar_label":"Java Examples","slug":"/api/java/examples"},"sidebar":"apiSidebar","previous":{"title":"Go Examples","permalink":"/payangel-api-docs/docs/api/golang/examples"},"next":{"title":"Errors","permalink":"/payangel-api-docs/docs/api/errors"}}');var r=a(6070),i=a(887);const o={id:"examples",title:"Java Code Examples",sidebar_label:"Java Examples",slug:"/api/java/examples"},s="Java Code Examples",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Maven Configuration",id:"maven-configuration",level:3},{value:"Gradle Configuration",id:"gradle-configuration",level:3},{value:"Model Classes",id:"model-classes",level:2},{value:"API Client",id:"api-client",level:2},{value:"Exception Handling",id:"exception-handling",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Webhook Handler (with Spark Framework)",id:"webhook-handler-with-spark-framework",level:2},{value:"Logging Configuration",id:"logging-configuration",level:2},{value:"Complete Project Structure",id:"complete-project-structure",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"java-code-examples",children:"Java Code Examples"})}),"\n",(0,r.jsx)(n.p,{children:"This section provides examples of how to use the PayAngel API with Java."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Java 8 or higher"}),"\n",(0,r.jsx)(n.li,{children:"Maven or Gradle for dependency management"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,r.jsx)(n.h3,{id:"maven-configuration",children:"Maven Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!-- pom.xml --\x3e\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>payangel-integration</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        \n        \x3c!-- Dependencies --\x3e\n        <okhttp.version>4.9.1</okhttp.version>\n        <jackson.version>2.13.0</jackson.version>\n        <lombok.version>1.18.22</lombok.version>\n        <slf4j.version>1.7.32</slf4j.version>\n        <logback.version>1.2.6</logback.version>\n    </properties>\n\n    <dependencies>\n        \x3c!-- HTTP Client --\x3e\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>${okhttp.version}</version>\n        </dependency>\n        \n        \x3c!-- JSON Processing --\x3e\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n        \n        \x3c!-- Lombok for boilerplate reduction --\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>${lombok.version}</version>\n            <scope>provided</scope>\n        </dependency>\n        \n        \x3c!-- Logging --\x3e\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>${logback.version}</version>\n        </dependency>\n        \n        \x3c!-- For Webhook Server --\x3e\n        <dependency>\n            <groupId>com.sparkjava</groupId>\n            <artifactId>spark-core</artifactId>\n            <version>2.9.3</version>\n        </dependency>\n    </dependencies>\n</project>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"gradle-configuration",children:"Gradle Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-groovy",children:"// build.gradle\nplugins {\n    id 'java'\n    id 'application'\n}\n\ngroup = 'com.example'\nversion = '1.0-SNAPSHOT'\nsourceCompatibility = '1.8'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // HTTP Client\n    implementation 'com.squareup.okhttp3:okhttp:4.9.1'\n    \n    // JSON Processing\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'\n    \n    // Lombok for boilerplate reduction\n    compileOnly 'org.projectlombok:lombok:1.18.22'\n    annotationProcessor 'org.projectlombok:lombok:1.18.22'\n    \n    // Logging\n    implementation 'org.slf4j:slf4j-api:1.7.32'\n    implementation 'ch.qos.logback:logback-classic:1.2.6'\n    \n    // For Webhook Server\n    implementation 'com.sparkjava:spark-core:2.9.3'\n}\n\napplication {\n    mainClassName = 'com.example.payangel.PayAngelDemo'\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"model-classes",children:"Model Classes"}),"\n",(0,r.jsx)(n.p,{children:"Create Java models for the PayAngel API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/payangel/model/Recipient.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Recipient {\n    private String name;\n    private String email;\n    private String phone;\n    private String address;\n    private String bankCode;\n    private String accountNumber;\n    private String mobileNetwork;\n    private String mobileNumber;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/model/SingleDisbursementRequest.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SingleDisbursementRequest {\n    private String reference;\n    private double amount;\n    private String currency;\n    \n    @JsonProperty("source_account")\n    private String sourceAccount;\n    \n    @JsonProperty("destination_type")\n    private String destinationType;\n    \n    private Recipient recipient;\n    private String narration;\n    \n    @JsonProperty("callback_url")\n    private String callbackUrl;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/model/Transaction.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Transaction {\n    private String reference;\n    private double amount;\n    private String currency;\n    \n    @JsonProperty("destination_type")\n    private String destinationType;\n    \n    private Recipient recipient;\n    private String narration;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/model/BulkDisbursementRequest.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Builder;\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\n@Builder\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class BulkDisbursementRequest {\n    @JsonProperty("batch_reference")\n    private String batchReference;\n    \n    @JsonProperty("source_account")\n    private String sourceAccount;\n    \n    @JsonProperty("callback_url")\n    private String callbackUrl;\n    \n    private List<Transaction> transactions;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/model/TransactionResponse.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\n@Data\npublic class TransactionResponse {\n    @JsonProperty("transaction_id")\n    private String transactionId;\n    \n    private String reference;\n    private double amount;\n    private double fee;\n    private double total;\n    private String currency;\n    private String status;\n    \n    @JsonProperty("created_at")\n    private String createdAt;\n    \n    @JsonProperty("estimated_delivery")\n    private String estimatedDelivery;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/model/BulkResponse.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\npublic class BulkResponse {\n    @JsonProperty("batch_id")\n    private String batchId;\n    \n    private List<TransactionResponse> transactions;\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/payangel/model/AccountBalance.java\npackage com.example.payangel.model;\n\nimport lombok.Data;\n\n@Data\npublic class AccountBalance {\n    private double available;\n    private String currency;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/payangel/model/ApiResponse.java\npackage com.example.payangel.model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport lombok.Data;\n\nimport java.util.List;\n\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ApiResponse<T> {\n    private String status;\n    private String message;\n    private T data;\n    private List<ErrorField> errors;\n    \n    @Data\n    public static class ErrorField {\n        private String field;\n        private String message;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-client",children:"API Client"}),"\n",(0,r.jsx)(n.p,{children:"Create a Java client for the PayAngel API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/client/PayAngelClient.java\npackage com.example.payangel.client;\n\nimport com.example.payangel.exception.PayAngelApiException;\nimport com.example.payangel.model.*;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.*;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\npublic class PayAngelClient {\n    private final OkHttpClient httpClient;\n    private final ObjectMapper objectMapper;\n    private final String apiKey;\n    private final String baseUrl;\n    \n    public PayAngelClient(String apiKey) {\n        this(apiKey, "https://api.payangel.com/v1");\n    }\n    \n    public PayAngelClient(String apiKey, String baseUrl) {\n        this.apiKey = apiKey;\n        this.baseUrl = baseUrl;\n        \n        this.httpClient = new OkHttpClient.Builder()\n            .connectTimeout(30, TimeUnit.SECONDS)\n            .readTimeout(30, TimeUnit.SECONDS)\n            .writeTimeout(30, TimeUnit.SECONDS)\n            .build();\n        \n        this.objectMapper = new ObjectMapper();\n    }\n    \n    public AccountBalance getAccountBalance() throws PayAngelApiException {\n        Request request = new Request.Builder()\n            .url(baseUrl + "/accounts/balance")\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .get()\n            .build();\n        \n        return executeRequest(request, new TypeReference<ApiResponse<AccountBalance>>() {})\n            .getData();\n    }\n    \n    public TransactionResponse createSingleDisbursement(SingleDisbursementRequest disbursementRequest) \n            throws PayAngelApiException {\n        RequestBody requestBody = RequestBody.create(\n            objectMapper.writeValueAsString(disbursementRequest),\n            MediaType.parse("application/json")\n        );\n        \n        Request request = new Request.Builder()\n            .url(baseUrl + "/disbursements/single")\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .post(requestBody)\n            .build();\n        \n        return executeRequest(request, new TypeReference<ApiResponse<TransactionResponse>>() {})\n            .getData();\n    }\n    \n    public BulkResponse createBulkDisbursement(BulkDisbursementRequest bulkRequest) \n            throws PayAngelApiException {\n        RequestBody requestBody = RequestBody.create(\n            objectMapper.writeValueAsString(bulkRequest),\n            MediaType.parse("application/json")\n        );\n        \n        Request request = new Request.Builder()\n            .url(baseUrl + "/disbursements/bulk")\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .post(requestBody)\n            .build();\n        \n        return executeRequest(request, new TypeReference<ApiResponse<BulkResponse>>() {})\n            .getData();\n    }\n    \n    public TransactionResponse getTransactionStatus(String transactionId) \n            throws PayAngelApiException {\n        Request request = new Request.Builder()\n            .url(baseUrl + "/disbursements/" + transactionId)\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .get()\n            .build();\n        \n        return executeRequest(request, new TypeReference<ApiResponse<TransactionResponse>>() {})\n            .getData();\n    }\n    \n    public static class TransactionsListResponse {\n        private int total;\n        private int page;\n        private int limit;\n        private List<TransactionResponse> transactions;\n        \n        // Getters and setters\n        public int getTotal() { return total; }\n        public void setTotal(int total) { this.total = total; }\n        \n        public int getPage() { return page; }\n        public void setPage(int page) { this.page = page; }\n        \n        public int getLimit() { return limit; }\n        public void setLimit(int limit) { this.limit = limit; }\n        \n        public List<TransactionResponse> getTransactions() { return transactions; }\n        public void setTransactions(List<TransactionResponse> transactions) { this.transactions = transactions; }\n    }\n    \n    public TransactionsListResponse listTransactions(int page, int limit) \n            throws PayAngelApiException {\n        Request request = new Request.Builder()\n            .url(baseUrl + "/disbursements?page=" + page + "&limit=" + limit)\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .get()\n            .build();\n        \n        return executeRequest(request, new TypeReference<ApiResponse<TransactionsListResponse>>() {})\n            .getData();\n    }\n    \n    public void cancelTransaction(String transactionId) throws PayAngelApiException {\n        Request request = new Request.Builder()\n            .url(baseUrl + "/disbursements/" + transactionId + "/cancel")\n            .header("Authorization", "Bearer " + apiKey)\n            .header("Content-Type", "application/json")\n            .post(RequestBody.create(new byte[0], null))\n            .build();\n        \n        executeRequest(request, new TypeReference<ApiResponse<Void>>() {});\n    }\n    \n    private <T> ApiResponse<T> executeRequest(Request request, TypeReference<ApiResponse<T>> typeReference) \n            throws PayAngelApiException {\n        try {\n            Response response = httpClient.newCall(request).execute();\n            String responseBody = response.body().string();\n            \n            if (!response.isSuccessful()) {\n                ApiResponse<?> errorResponse = objectMapper.readValue(responseBody, \n                    new TypeReference<ApiResponse<?>>() {});\n                \n                throw new PayAngelApiException(\n                    errorResponse.getMessage(),\n                    response.code(),\n                    errorResponse.getErrors()\n                );\n            }\n            \n            return objectMapper.readValue(responseBody, typeReference);\n        } catch (IOException e) {\n            throw new PayAngelApiException("Failed to execute request: " + e.getMessage(), e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,r.jsx)(n.p,{children:"Create a custom exception for API errors:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/payangel/exception/PayAngelApiException.java\npackage com.example.payangel.exception;\n\nimport com.example.payangel.model.ApiResponse;\nimport lombok.Getter;\n\nimport java.util.List;\n\n@Getter\npublic class PayAngelApiException extends Exception {\n    private final int statusCode;\n    private final List<ApiResponse.ErrorField> errors;\n    \n    public PayAngelApiException(String message, int statusCode, List<ApiResponse.ErrorField> errors) {\n        super(message);\n        this.statusCode = statusCode;\n        this.errors = errors;\n    }\n    \n    public PayAngelApiException(String message, Throwable cause) {\n        super(message, cause);\n        this.statusCode = 0;\n        this.errors = null;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.p,{children:"Create a demo class to showcase the PayAngel API integration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/PayAngelDemo.java\npackage com.example.payangel;\n\nimport com.example.payangel.client.PayAngelClient;\nimport com.example.payangel.exception.PayAngelApiException;\nimport com.example.payangel.model.*;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n@Slf4j\npublic class PayAngelDemo {\n    private static final String API_KEY = "your_api_key_here"; // Replace with your actual API key\n    \n    public static void main(String[] args) {\n        // Initialize PayAngel client\n        PayAngelClient client = new PayAngelClient(API_KEY);\n        // For sandbox environment\n        // PayAngelClient client = new PayAngelClient(API_KEY, "https://sandbox-api.payangel.com/v1");\n        \n        try {\n            // Check account balance\n            AccountBalance balance = client.getAccountBalance();\n            log.info("Account Balance: {} {}", balance.getAvailable(), balance.getCurrency());\n            \n            // Create a bank transfer\n            TransactionResponse bankTransfer = createBankTransfer(client);\n            log.info("Bank Transfer Created - Transaction ID: {}, Status: {}", \n                bankTransfer.getTransactionId(), bankTransfer.getStatus());\n            \n            // Create a mobile money transfer\n            TransactionResponse mobileMoneyTransfer = createMobileMoneyTransfer(client);\n            log.info("Mobile Money Transfer Created - Transaction ID: {}, Status: {}", \n                mobileMoneyTransfer.getTransactionId(), mobileMoneyTransfer.getStatus());\n            \n            // Create a bulk transfer\n            BulkResponse bulkResponse = createBulkTransfer(client);\n            log.info("Bulk Transfer Created - Batch ID: {}, Transactions: {}", \n                bulkResponse.getBatchId(), bulkResponse.getTransactions().size());\n            \n            // Check transaction status\n            if (!bulkResponse.getTransactions().isEmpty()) {\n                String transactionId = bulkResponse.getTransactions().get(0).getTransactionId();\n                TransactionResponse status = client.getTransactionStatus(transactionId);\n                log.info("Transaction Status: {}", status.getStatus());\n            }\n            \n            // List transactions\n            PayAngelClient.TransactionsListResponse transactions = client.listTransactions(1, 10);\n            log.info("Total Transactions: {}", transactions.getTotal());\n            for (int i = 0; i < transactions.getTransactions().size(); i++) {\n                TransactionResponse tx = transactions.getTransactions().get(i);\n                log.info("{}. {}: {} {} ({})", i + 1, tx.getTransactionId(), \n                    tx.getAmount(), tx.getCurrency(), tx.getStatus());\n            }\n            \n        } catch (PayAngelApiException e) {\n            log.error("API Error: {} (Status Code: {})", e.getMessage(), e.getStatusCode());\n            if (e.getErrors() != null) {\n                for (ApiResponse.ErrorField error : e.getErrors()) {\n                    log.error("Field Error: {} - {}", error.getField(), error.getMessage());\n                }\n            }\n        } catch (Exception e) {\n            log.error("Unexpected error: {}", e.getMessage(), e);\n        }\n    }\n    \n    // Create a bank transfer\n    private static TransactionResponse createBankTransfer(PayAngelClient client) throws PayAngelApiException {\n        // Generate a unique reference\n        String reference = "bank-transfer-" + UUID.randomUUID().toString().substring(0, 8);\n        \n        // Prepare the request\n        SingleDisbursementRequest request = SingleDisbursementRequest.builder()\n            .reference(reference)\n            .amount(1000.00)\n            .currency("GHS")\n            .sourceAccount("acc_123456789")\n            .destinationType("bank_account")\n            .recipient(Recipient.builder()\n                .name("John Doe")\n                .email("john.doe@example.com")\n                .phone("+233501234567")\n                .bankCode("GH123456")\n                .accountNumber("1234567890")\n                .build())\n            .narration("Salary payment")\n            .callbackUrl("https://your-website.com/webhooks/payangel")\n            .build();\n        \n        return client.createSingleDisbursement(request);\n    }\n    \n    // Create a mobile money transfer\n    private static TransactionResponse createMobileMoneyTransfer(PayAngelClient client) throws PayAngelApiException {\n        // Generate a unique reference\n        String reference = "momo-transfer-" + UUID.randomUUID().toString().substring(0, 8);\n        \n        // Prepare the request\n        SingleDisbursementRequest request = SingleDisbursementRequest.builder()\n            .reference(reference)\n            .amount(500.00)\n            .currency("GHS")\n            .sourceAccount("acc_123456789")\n            .destinationType("mobile_money")\n            .recipient(Recipient.builder()\n                .name("Jane Smith")\n                .phone("+233507654321")\n                .mobileNetwork("MTN")\n                .mobileNumber("0507654321")\n                .build())\n            .narration("Commission payment")\n            .callbackUrl("https://your-website.com/webhooks/payangel")\n            .build();\n        \n        return client.createSingleDisbursement(request);\n    }\n    \n    // Create a bulk transfer\n    private static BulkResponse createBulkTransfer(PayAngelClient client) throws PayAngelApiException {\n        // Generate a unique batch reference\n        String batchReference = "batch-" + UUID.randomUUID().toString().substring(0, 8);\n        \n        // Prepare transactions\n        List<Transaction> transactions = new ArrayList<>();\n        \n        transactions.add(Transaction.builder()\n            .reference("tx1-" + UUID.randomUUID().toString().substring(0, 8))\n            .amount(1000.00)\n            .currency("GHS")\n            .destinationType("bank_account")\n            .recipient(Recipient.builder()\n                .name("John Doe")\n                .email("john.doe@example.com")\n                .phone("+233501234567")\n                .bankCode("GH123456")\n                .accountNumber("1234567890")\n                .build())\n            .narration("Salary payment")\n            .build());\n        \n        transactions.add(Transaction.builder()\n            .reference("tx2-" + UUID.randomUUID().toString().substring(0, 8))\n            .amount(500.00)\n            .currency("GHS")\n            .destinationType("mobile_money")\n            .recipient(Recipient.builder()\n                .name("Jane Smith")\n                .phone("+233507654321")\n                .mobileNetwork("MTN")\n                .mobileNumber("0507654321")\n                .build())\n            .narration("Commission payment")\n            .build());\n        \n        // Prepare the request\n        BulkDisbursementRequest request = BulkDisbursementRequest.builder()\n            .batchReference(batchReference)\n            .sourceAccount("acc_123456789")\n            .callbackUrl("https://your-website.com/webhooks/payangel")\n            .transactions(transactions)\n            .build();\n        \n        return client.createBulkDisbursement(request);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"webhook-handler-with-spark-framework",children:"Webhook Handler (with Spark Framework)"}),"\n",(0,r.jsx)(n.p,{children:"Create a webhook handler using the Spark framework:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/payangel/webhook/WebhookServer.java\npackage com.example.payangel.webhook;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport spark.Spark;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Formatter;\n\n@Slf4j\npublic class WebhookServer {\n    private static final String WEBHOOK_SECRET = "your_webhook_secret_here"; // Replace with your actual webhook secret\n    private static final int PORT = 3000;\n    \n    public static void main(String[] args) {\n        // Configure Spark to listen on the specified port\n        Spark.port(PORT);\n        \n        // Route for PayAngel webhooks\n        Spark.post("/webhooks/payangel", (request, response) -> {\n            // Get the signature from headers\n            String signature = request.headers("X-PayAngel-Signature");\n            if (signature == null || signature.isEmpty()) {\n                response.status(400);\n                return "Missing signature header";\n            }\n            \n            // Get the request body\n            String body = request.body();\n            \n            // Verify the signature\n            if (!verifySignature(body, signature)) {\n                response.status(401);\n                return "Invalid signature";\n            }\n            \n            // Parse the webhook payload\n            ObjectMapper objectMapper = new ObjectMapper();\n            JsonNode payload = objectMapper.readTree(body);\n            \n            String event = payload.get("event").asText();\n            JsonNode data = payload.get("data");\n            \n            // Handle different event types\n            switch (event) {\n                case "disbursement.pending":\n                    log.info("Transaction pending: {}", data.get("transaction_id").asText());\n                    break;\n                case "disbursement.processing":\n                    log.info("Transaction processing: {}", data.get("transaction_id").asText());\n                    break;\n                case "disbursement.completed":\n                    log.info("Transaction completed: {}", data.get("transaction_id").asText());\n                    // Update your database or notify your users\n                    break;\n                case "disbursement.failed":\n                    log.info("Transaction failed: {}, Reason: {}", \n                        data.get("transaction_id").asText(), \n                        data.has("failure_reason") ? data.get("failure_reason").asText() : "Unknown");\n                    // Handle the failure\n                    break;\n                default:\n                    log.info("Unhandled event: {}", event);\n            }\n            \n            // Acknowledge receipt of the webhook\n            response.status(200);\n            return "Webhook received";\n        });\n        \n        log.info("Webhook server listening on port {}", PORT);\n    }\n    \n    // Verify webhook signature\n    private static boolean verifySignature(String payload, String signature) {\n        try {\n            // Create HMAC-SHA256 instance with the webhook secret\n            Mac mac = Mac.getInstance("HmacSHA256");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(WEBHOOK_SECRET.getBytes(StandardCharsets.UTF_8), "HmacSHA256");\n            mac.init(secretKeySpec);\n            \n            // Compute the HMAC\n            byte[] hash = mac.doFinal(payload.getBytes(StandardCharsets.UTF_8));\n            \n            // Convert the HMAC to a hex string\n            String expectedSignature = toHexString(hash);\n            \n            // Compare the computed signature with the provided signature\n            return expectedSignature.equals(signature);\n        } catch (Exception e) {\n            log.error("Failed to verify signature: {}", e.getMessage(), e);\n            return false;\n        }\n    }\n    \n    // Convert byte array to hex string\n    private static String toHexString(byte[] bytes) {\n        try (Formatter formatter = new Formatter()) {\n            for (byte b : bytes) {\n                formatter.format("%02x", b);\n            }\n            return formatter.toString();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"logging-configuration",children:"Logging Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Create a Logback configuration file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!-- src/main/resources/logback.xml --\x3e\n<configuration>\n    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    \n    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        <file>logs/payangel.log</file>\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>logs/payangel.%d{yyyy-MM-dd}.log</fileNamePattern>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    \n    <root level="INFO">\n        <appender-ref ref="CONSOLE" />\n        <appender-ref ref="FILE" />\n    </root>\n</configuration>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-project-structure",children:"Complete Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"Here's a recommended project structure for a Java application using the PayAngel API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"payangel-integration/\n\u251c\u2500\u2500 pom.xml (or build.gradle)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 payangel/\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 PayAngelDemo.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 client/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 PayAngelClient.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 exception/\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 PayAngelApiException.java\n\u2502   \u2502   \u2502               \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 AccountBalance.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 ApiResponse.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 BulkDisbursementRequest.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 BulkResponse.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 Recipient.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 SingleDisbursementRequest.java\n\u2502   \u2502   \u2502               \u2502   \u251c\u2500\u2500 Transaction.java\n\u2502   \u2502   \u2502               \u2502   \u2514\u2500\u2500 TransactionResponse.java\n\u2502   \u2502   \u2502               \u2514\u2500\u2500 webhook/\n\u2502   \u2502   \u2502                   \u2514\u2500\u2500 WebhookServer.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u2514\u2500\u2500 logback.xml\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 example/\n\u2502                   \u2514\u2500\u2500 payangel/\n\u2502                       \u2514\u2500\u2500 client/\n\u2502                           \u2514\u2500\u2500 PayAngelClientTest.java\n\u2514\u2500\u2500 logs/\n    \u2514\u2500\u2500 payangel.log\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);