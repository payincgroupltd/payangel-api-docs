"use strict";(self.webpackChunkpayangel_api_docs=self.webpackChunkpayangel_api_docs||[]).push([[335],{887:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var r=s(758);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},2080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/typescript/examples","title":"TypeScript Code Examples","description":"This section provides examples of how to use the PayAngel API with TypeScript.","source":"@site/docs/api/typescript/examples.md","sourceDirName":"api/typescript","slug":"/api/typescript/examples","permalink":"/payangel-api-docs/docs/api/typescript/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/payincgroupltd/payangel-api-docs/tree/main/docs/api/typescript/examples.md","tags":[],"version":"current","frontMatter":{"id":"examples","title":"TypeScript Code Examples","sidebar_label":"TypeScript Examples","slug":"/api/typescript/examples"},"sidebar":"apiSidebar","previous":{"title":"JavaScript Examples","permalink":"/payangel-api-docs/docs/api/javascript/examples"},"next":{"title":"Go Examples","permalink":"/payangel-api-docs/docs/api/golang/examples"}}');var t=s(6070),a=s(887);const o={id:"examples",title:"TypeScript Code Examples",sidebar_label:"TypeScript Examples",slug:"/api/typescript/examples"},i="TypeScript Code Examples",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"TypeScript Configuration",id:"typescript-configuration",level:2},{value:"Type Definitions",id:"type-definitions",level:2},{value:"PayAngel API Client",id:"payangel-api-client",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Initialize the Client",id:"initialize-the-client",level:3},{value:"Check Account Balance",id:"check-account-balance",level:3},{value:"Create a Single Disbursement",id:"create-a-single-disbursement",level:3},{value:"Create a Bulk Disbursement",id:"create-a-bulk-disbursement",level:3},{value:"Check Transaction Status",id:"check-transaction-status",level:3},{value:"List Transactions",id:"list-transactions",level:3},{value:"Webhook Handler (Express.js)",id:"webhook-handler-expressjs",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Complete Project Structure",id:"complete-project-structure",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"typescript-code-examples",children:"TypeScript Code Examples"})}),"\n",(0,t.jsx)(n.p,{children:"This section provides examples of how to use the PayAngel API with TypeScript."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Node.js 12.x or higher"}),"\n",(0,t.jsx)(n.li,{children:"npm or yarn package manager"}),"\n",(0,t.jsx)(n.li,{children:"TypeScript 4.x or higher"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Install the required dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install axios typescript @types/node\n# or\nyarn add axios typescript @types/node\n"})}),"\n",(0,t.jsx)(n.h2,{id:"typescript-configuration",children:"TypeScript Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," file in the root of your project:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "es2018",\n    "module": "commonjs",\n    "outDir": "./dist",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true\n  },\n  "include": ["src/**/*"]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,t.jsx)(n.p,{children:"First, let's define TypeScript interfaces for the PayAngel API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/types/payangel.ts\n\nexport interface Recipient {\n  name: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  bank_code?: string;\n  account_number?: string;\n  mobile_network?: string;\n  mobile_number?: string;\n}\n\nexport type DestinationType = 'bank_account' | 'mobile_money' | 'cash_pickup';\n\nexport interface SingleDisbursementRequest {\n  reference: string;\n  amount: number;\n  currency: string;\n  source_account: string;\n  destination_type: DestinationType;\n  recipient: Recipient;\n  narration: string;\n  callback_url?: string;\n}\n\nexport interface Transaction {\n  reference: string;\n  amount: number;\n  currency: string;\n  destination_type: DestinationType;\n  recipient: Recipient;\n  narration: string;\n}\n\nexport interface BulkDisbursementRequest {\n  batch_reference: string;\n  source_account: string;\n  callback_url?: string;\n  transactions: Transaction[];\n}\n\nexport interface TransactionResponse {\n  transaction_id: string;\n  reference: string;\n  amount: number;\n  fee: number;\n  total: number;\n  currency: string;\n  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';\n  created_at: string;\n  estimated_delivery: string;\n}\n\nexport interface ApiResponse<T> {\n  status: 'success' | 'error';\n  message: string;\n  data?: T;\n  errors?: {\n    field: string;\n    message: string;\n  }[];\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"payangel-api-client",children:"PayAngel API Client"}),"\n",(0,t.jsx)(n.p,{children:"Create a typed API client for PayAngel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/services/payangel-client.ts\n\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  ApiResponse,\n  SingleDisbursementRequest,\n  BulkDisbursementRequest,\n  TransactionResponse\n} from '../types/payangel';\n\nexport class PayAngelClient {\n  private client: AxiosInstance;\n  \n  constructor(apiKey: string, baseURL: string = 'https://api.payangel.com/v1') {\n    this.client = axios.create({\n      baseURL,\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  \n  // Get account balance\n  async getAccountBalance(): Promise<ApiResponse<{ available: number; currency: string }>> {\n    const response: AxiosResponse<ApiResponse<{ available: number; currency: string }>> = \n      await this.client.get('/accounts/balance');\n    return response.data;\n  }\n  \n  // Create a single disbursement\n  async createSingleDisbursement(data: SingleDisbursementRequest): Promise<ApiResponse<TransactionResponse>> {\n    const response: AxiosResponse<ApiResponse<TransactionResponse>> = \n      await this.client.post('/disbursements/single', data);\n    return response.data;\n  }\n  \n  // Create a bulk disbursement\n  async createBulkDisbursement(data: BulkDisbursementRequest): Promise<ApiResponse<{ batch_id: string; transactions: TransactionResponse[] }>> {\n    const response: AxiosResponse<ApiResponse<{ batch_id: string; transactions: TransactionResponse[] }>> = \n      await this.client.post('/disbursements/bulk', data);\n    return response.data;\n  }\n  \n  // Get transaction status\n  async getTransactionStatus(transactionId: string): Promise<ApiResponse<TransactionResponse>> {\n    const response: AxiosResponse<ApiResponse<TransactionResponse>> = \n      await this.client.get(`/disbursements/${transactionId}`);\n    return response.data;\n  }\n  \n  // List transactions\n  async listTransactions(page: number = 1, limit: number = 20): Promise<ApiResponse<{ \n    total: number; \n    page: number; \n    limit: number; \n    transactions: TransactionResponse[] \n  }>> {\n    const response: AxiosResponse<ApiResponse<{ \n      total: number; \n      page: number; \n      limit: number; \n      transactions: TransactionResponse[] \n    }>> = await this.client.get('/disbursements', {\n      params: { page, limit }\n    });\n    return response.data;\n  }\n  \n  // Cancel a transaction\n  async cancelTransaction(transactionId: string): Promise<ApiResponse<{ status: string }>> {\n    const response: AxiosResponse<ApiResponse<{ status: string }>> = \n      await this.client.post(`/disbursements/${transactionId}/cancel`);\n    return response.data;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"initialize-the-client",children:"Initialize the Client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/index.ts\n\nimport { PayAngelClient } from './services/payangel-client';\nimport { SingleDisbursementRequest, BulkDisbursementRequest } from './types/payangel';\n\n// Initialize the client\nconst API_KEY = process.env.PAYANGEL_API_KEY || 'your_api_key_here';\nconst client = new PayAngelClient(API_KEY);\n\n// For sandbox environment\n// const client = new PayAngelClient(API_KEY, 'https://sandbox-api.payangel.com/v1');\n\nasync function main() {\n  try {\n    // Your code here\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nmain();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"check-account-balance",children:"Check Account Balance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function checkBalance() {\n  try {\n    const balanceResponse = await client.getAccountBalance();\n    \n    if (balanceResponse.status === 'success' && balanceResponse.data) {\n      console.log(`Available Balance: ${balanceResponse.data.available} ${balanceResponse.data.currency}`);\n      return balanceResponse.data;\n    } else {\n      console.error('Failed to get balance:', balanceResponse.message);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error checking balance:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-a-single-disbursement",children:"Create a Single Disbursement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SingleDisbursementRequest, DestinationType } from './types/payangel';\n\nasync function createBankTransfer() {\n  try {\n    const disbursementData: SingleDisbursementRequest = {\n      reference: `payment-${Date.now()}`, // Generate unique reference\n      amount: 1000,\n      currency: 'GHS',\n      source_account: 'acc_123456789',\n      destination_type: 'bank_account',\n      recipient: {\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        phone: '+233501234567',\n        bank_code: 'GH123456',\n        account_number: '1234567890'\n      },\n      narration: 'Salary payment',\n      callback_url: 'https://your-website.com/webhooks/payangel'\n    };\n    \n    const response = await client.createSingleDisbursement(disbursementData);\n    \n    if (response.status === 'success' && response.data) {\n      console.log('Disbursement created successfully');\n      console.log('Transaction ID:', response.data.transaction_id);\n      console.log('Status:', response.data.status);\n      return response.data;\n    } else {\n      console.error('Failed to create disbursement:', response.message);\n      if (response.errors) {\n        response.errors.forEach(error => {\n          console.error(`- ${error.field}: ${error.message}`);\n        });\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error creating disbursement:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-a-bulk-disbursement",children:"Create a Bulk Disbursement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { BulkDisbursementRequest, Transaction } from './types/payangel';\n\nasync function createBulkTransfer() {\n  try {\n    const transactions: Transaction[] = [\n      {\n        reference: `tx1-${Date.now()}`,\n        amount: 1000,\n        currency: 'GHS',\n        destination_type: 'bank_account',\n        recipient: {\n          name: 'John Doe',\n          email: 'john.doe@example.com',\n          phone: '+233501234567',\n          bank_code: 'GH123456',\n          account_number: '1234567890'\n        },\n        narration: 'Salary payment'\n      },\n      {\n        reference: `tx2-${Date.now()}`,\n        amount: 500,\n        currency: 'GHS',\n        destination_type: 'mobile_money',\n        recipient: {\n          name: 'Jane Smith',\n          phone: '+233507654321',\n          mobile_network: 'MTN',\n          mobile_number: '0507654321'\n        },\n        narration: 'Commission payment'\n      }\n    ];\n    \n    const bulkData: BulkDisbursementRequest = {\n      batch_reference: `batch-${Date.now()}`,\n      source_account: 'acc_123456789',\n      callback_url: 'https://your-website.com/webhooks/payangel',\n      transactions\n    };\n    \n    const response = await client.createBulkDisbursement(bulkData);\n    \n    if (response.status === 'success' && response.data) {\n      console.log('Bulk disbursement created successfully');\n      console.log('Batch ID:', response.data.batch_id);\n      console.log('Transactions:', response.data.transactions.length);\n      return response.data;\n    } else {\n      console.error('Failed to create bulk disbursement:', response.message);\n      if (response.errors) {\n        response.errors.forEach(error => {\n          console.error(`- ${error.field}: ${error.message}`);\n        });\n      }\n      return null;\n    }\n  } catch (error) {\n    console.error('Error creating bulk disbursement:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"check-transaction-status",children:"Check Transaction Status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function checkTransactionStatus(transactionId: string) {\n  try {\n    const response = await client.getTransactionStatus(transactionId);\n    \n    if (response.status === 'success' && response.data) {\n      console.log('Transaction Status:', response.data.status);\n      console.log('Transaction Details:', response.data);\n      return response.data;\n    } else {\n      console.error('Failed to get transaction status:', response.message);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error checking transaction status:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"list-transactions",children:"List Transactions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function listTransactions(page: number = 1, limit: number = 20) {\n  try {\n    const response = await client.listTransactions(page, limit);\n    \n    if (response.status === 'success' && response.data) {\n      console.log(`Showing ${response.data.transactions.length} of ${response.data.total} transactions`);\n      response.data.transactions.forEach(tx => {\n        console.log(`- ${tx.transaction_id}: ${tx.amount} ${tx.currency} (${tx.status})`);\n      });\n      return response.data;\n    } else {\n      console.error('Failed to list transactions:', response.message);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error listing transactions:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"webhook-handler-expressjs",children:"Webhook Handler (Express.js)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/webhook-server.ts\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport crypto from 'crypto';\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst WEBHOOK_SECRET = process.env.PAYANGEL_WEBHOOK_SECRET || 'your_webhook_secret_here';\n\ninterface WebhookPayload {\n  event: string;\n  data: {\n    transaction_id: string;\n    reference: string;\n    status: string;\n    amount: number;\n    currency: string;\n    failure_reason?: string;\n    [key: string]: any;\n  };\n}\n\n// Verify webhook signature\nfunction verifySignature(payload: any, signature: string): boolean {\n  const hmac = crypto.createHmac('sha256', WEBHOOK_SECRET);\n  const digest = hmac.update(JSON.stringify(payload)).digest('hex');\n  return crypto.timingSafeEqual(\n    Buffer.from(digest),\n    Buffer.from(signature)\n  );\n}\n\napp.post('/webhooks/payangel', (req, res) => {\n  const signature = req.headers['x-payangel-signature'] as string;\n  \n  // Verify webhook signature\n  if (!signature || !verifySignature(req.body, signature)) {\n    console.error('Invalid webhook signature');\n    return res.status(401).send('Invalid signature');\n  }\n  \n  const { event, data } = req.body as WebhookPayload;\n  \n  // Handle different event types\n  switch (event) {\n    case 'disbursement.pending':\n      console.log('Transaction pending:', data.transaction_id);\n      break;\n    case 'disbursement.processing':\n      console.log('Transaction processing:', data.transaction_id);\n      break;\n    case 'disbursement.completed':\n      console.log('Transaction completed:', data.transaction_id);\n      // Update your database or notify your users\n      break;\n    case 'disbursement.failed':\n      console.log('Transaction failed:', data.transaction_id, data.failure_reason);\n      // Handle the failure\n      break;\n    default:\n      console.log('Unhandled event:', event);\n  }\n  \n  // Acknowledge receipt of the webhook\n  res.status(200).send('Webhook received');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Webhook server listening on port ${PORT}`);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/utils/error-handler.ts\n\nimport { AxiosError } from 'axios';\nimport { ApiResponse } from '../types/payangel';\n\nexport class PayAngelError extends Error {\n  status?: number;\n  response?: ApiResponse<any>;\n  \n  constructor(message: string, status?: number, response?: ApiResponse<any>) {\n    super(message);\n    this.name = 'PayAngelError';\n    this.status = status;\n    this.response = response;\n  }\n}\n\nexport function handleApiError(error: unknown): never {\n  if (axios.isAxiosError(error)) {\n    const axiosError = error as AxiosError<ApiResponse<any>>;\n    \n    if (axiosError.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      const status = axiosError.response.status;\n      const data = axiosError.response.data;\n      \n      // Handle specific error codes\n      switch (status) {\n        case 401:\n          throw new PayAngelError('Authentication failed. Check your API key.', status, data);\n        case 400:\n          throw new PayAngelError(`Invalid request: ${data.message}`, status, data);\n        case 429:\n          throw new PayAngelError('Rate limit exceeded. Please try again later.', status, data);\n        case 500:\n          throw new PayAngelError('PayAngel server error. Please try again later.', status, data);\n        default:\n          throw new PayAngelError(`API error: ${data.message}`, status, data);\n      }\n    } else if (axiosError.request) {\n      // The request was made but no response was received\n      throw new PayAngelError('No response received from server. Check your connection.', undefined);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      throw new PayAngelError(`Request error: ${axiosError.message}`, undefined);\n    }\n  }\n  \n  // Not an Axios error\n  if (error instanceof Error) {\n    throw new PayAngelError(`Unexpected error: ${error.message}`, undefined);\n  }\n  \n  throw new PayAngelError('Unknown error occurred', undefined);\n}\n\n// Usage\ntry {\n  // API call here\n} catch (error) {\n  handleApiError(error);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-project-structure",children:"Complete Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"Here's a recommended project structure for a TypeScript application using the PayAngel API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"payangel-integration/\n\u251c\u2500\u2500 .env                      # Environment variables\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json             # TypeScript configuration\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts              # Main application entry point\n\u2502   \u251c\u2500\u2500 config.ts             # Configuration and environment setup\n\u2502   \u251c\u2500\u2500 types/\n\u2502   \u2502   \u2514\u2500\u2500 payangel.ts       # PayAngel API type definitions\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2514\u2500\u2500 payangel-client.ts # PayAngel API client\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u2514\u2500\u2500 error-handler.ts  # Error handling utilities\n\u2502   \u2514\u2500\u2500 webhook-server.ts     # Express server for webhooks\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 payangel.test.ts      # Tests for PayAngel integration\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);