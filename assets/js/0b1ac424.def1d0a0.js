"use strict";(self.webpackChunkpayangel_api_docs=self.webpackChunkpayangel_api_docs||[]).push([[912],{887:(t,n,e)=>{e.d(n,{R:()=>i,x:()=>o});var r=e(758);const a={},s=r.createContext(a);function i(t){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),r.createElement(s.Provider,{value:n},t.children)}},9575:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/golang/examples","title":"Go Code Examples","description":"This section provides examples of how to use the PayAngel API with Go.","source":"@site/docs/api/golang/examples.md","sourceDirName":"api/golang","slug":"/api/golang/examples","permalink":"/payangel-api-docs/docs/api/golang/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/payincgroupltd/payangel-api-docs/tree/main/docs/api/golang/examples.md","tags":[],"version":"current","frontMatter":{"id":"examples","title":"Go Code Examples","sidebar_label":"Go Examples","slug":"/api/golang/examples"},"sidebar":"apiSidebar","previous":{"title":"TypeScript Examples","permalink":"/payangel-api-docs/docs/api/typescript/examples"},"next":{"title":"Java Examples","permalink":"/payangel-api-docs/docs/api/java/examples"}}');var a=e(6070),s=e(887);const i={id:"examples",title:"Go Code Examples",sidebar_label:"Go Examples",slug:"/api/golang/examples"},o="Go Code Examples",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"PayAngel Client",id:"payangel-client",level:2},{value:"Type Definitions",id:"type-definitions",level:2},{value:"API Methods",id:"api-methods",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Webhook Handler (with Gin Framework)",id:"webhook-handler-with-gin-framework",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Project Structure",id:"project-structure",level:2}];function u(t){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"go-code-examples",children:"Go Code Examples"})}),"\n",(0,a.jsx)(n.p,{children:"This section provides examples of how to use the PayAngel API with Go."}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Go 1.16 or higher"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,a.jsx)(n.p,{children:"First, create a new Go module:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir payangel-integration\ncd payangel-integration\ngo mod init github.com/yourusername/payangel-integration\n"})}),"\n",(0,a.jsx)(n.h2,{id:"payangel-client",children:"PayAngel Client"}),"\n",(0,a.jsx)(n.p,{children:"Create a Go client for the PayAngel API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// payangel/client.go\npackage payangel\n\nimport (\n\t"bytes"\n\t"encoding/json"\n\t"fmt"\n\t"io/ioutil"\n\t"net/http"\n\t"time"\n)\n\n// Client represents a PayAngel API client\ntype Client struct {\n\tapiKey  string\n\tbaseURL string\n\thttpClient *http.Client\n}\n\n// NewClient creates a new PayAngel API client\nfunc NewClient(apiKey string, baseURL string) *Client {\n\tif baseURL == "" {\n\t\tbaseURL = "https://api.payangel.com/v1"\n\t}\n\t\n\treturn &Client{\n\t\tapiKey:  apiKey,\n\t\tbaseURL: baseURL,\n\t\thttpClient: &http.Client{\n\t\t\tTimeout: time.Second * 30,\n\t\t},\n\t}\n}\n\n// createRequest constructs an HTTP request with authorization header\nfunc (c *Client) createRequest(method, path string, body interface{}) (*http.Request, error) {\n\turl := fmt.Sprintf("%s%s", c.baseURL, path)\n\t\n\tvar buf bytes.Buffer\n\tif body != nil {\n\t\terr := json.NewEncoder(&buf).Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf("failed to encode request body: %w", err)\n\t\t}\n\t}\n\t\n\treq, err := http.NewRequest(method, url, &buf)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf("failed to create request: %w", err)\n\t}\n\t\n\treq.Header.Set("Authorization", "Bearer "+c.apiKey)\n\treq.Header.Set("Content-Type", "application/json")\n\t\n\treturn req, nil\n}\n\n// sendRequest sends an HTTP request and returns the response\nfunc (c *Client) sendRequest(req *http.Request, v interface{}) error {\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn fmt.Errorf("failed to send request: %w", err)\n\t}\n\tdefer resp.Body.Close()\n\t\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf("failed to read response body: %w", err)\n\t}\n\t\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tvar errResp ErrorResponse\n\t\tif err := json.Unmarshal(body, &errResp); err != nil {\n\t\t\treturn fmt.Errorf("failed to parse error response: %w", err)\n\t\t}\n\t\treturn &APIError{\n\t\t\tStatusCode: resp.StatusCode,\n\t\t\tMessage:    errResp.Message,\n\t\t\tErrors:     errResp.Errors,\n\t\t}\n\t}\n\t\n\tif v != nil {\n\t\tif err := json.Unmarshal(body, v); err != nil {\n\t\t\treturn fmt.Errorf("failed to parse response: %w", err)\n\t\t}\n\t}\n\t\n\treturn nil\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,a.jsx)(n.p,{children:"Define the necessary types for interacting with the API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// payangel/types.go\npackage payangel\n\n// Response represents a generic API response\ntype Response struct {\n\tStatus  string      `json:"status"`\n\tMessage string      `json:"message"`\n\tData    interface{} `json:"data,omitempty"`\n}\n\n// Recipient represents a disbursement recipient\ntype Recipient struct {\n\tName           string `json:"name"`\n\tEmail          string `json:"email,omitempty"`\n\tPhone          string `json:"phone"`\n\tAddress        string `json:"address,omitempty"`\n\tBankCode       string `json:"bank_code,omitempty"`\n\tAccountNumber  string `json:"account_number,omitempty"`\n\tMobileNetwork  string `json:"mobile_network,omitempty"`\n\tMobileNumber   string `json:"mobile_number,omitempty"`\n}\n\n// SingleDisbursementRequest represents a single disbursement request\ntype SingleDisbursementRequest struct {\n\tReference       string    `json:"reference"`\n\tAmount          float64   `json:"amount"`\n\tCurrency        string    `json:"currency"`\n\tSourceAccount   string    `json:"source_account"`\n\tDestinationType string    `json:"destination_type"`\n\tRecipient       Recipient `json:"recipient"`\n\tNarration       string    `json:"narration"`\n\tCallbackURL     string    `json:"callback_url,omitempty"`\n}\n\n// Transaction represents a transaction in a bulk disbursement\ntype Transaction struct {\n\tReference       string    `json:"reference"`\n\tAmount          float64   `json:"amount"`\n\tCurrency        string    `json:"currency"`\n\tDestinationType string    `json:"destination_type"`\n\tRecipient       Recipient `json:"recipient"`\n\tNarration       string    `json:"narration"`\n}\n\n// BulkDisbursementRequest represents a bulk disbursement request\ntype BulkDisbursementRequest struct {\n\tBatchReference string        `json:"batch_reference"`\n\tSourceAccount  string        `json:"source_account"`\n\tCallbackURL    string        `json:"callback_url,omitempty"`\n\tTransactions   []Transaction `json:"transactions"`\n}\n\n// TransactionResponse represents a transaction response\ntype TransactionResponse struct {\n\tTransactionID      string    `json:"transaction_id"`\n\tReference          string    `json:"reference"`\n\tAmount             float64   `json:"amount"`\n\tFee                float64   `json:"fee"`\n\tTotal              float64   `json:"total"`\n\tCurrency           string    `json:"currency"`\n\tStatus             string    `json:"status"`\n\tCreatedAt          string    `json:"created_at"`\n\tEstimatedDelivery  string    `json:"estimated_delivery"`\n}\n\n// BulkResponse represents a bulk disbursement response\ntype BulkResponse struct {\n\tBatchID      string                `json:"batch_id"`\n\tTransactions []TransactionResponse `json:"transactions"`\n}\n\n// AccountBalance represents an account balance response\ntype AccountBalance struct {\n\tAvailable float64 `json:"available"`\n\tCurrency  string  `json:"currency"`\n}\n\n// ErrorField represents a field error\ntype ErrorField struct {\n\tField   string `json:"field"`\n\tMessage string `json:"message"`\n}\n\n// ErrorResponse represents an error response\ntype ErrorResponse struct {\n\tStatus  string       `json:"status"`\n\tMessage string       `json:"message"`\n\tErrors  []ErrorField `json:"errors,omitempty"`\n}\n\n// APIError represents an API error\ntype APIError struct {\n\tStatusCode int\n\tMessage    string\n\tErrors     []ErrorField\n}\n\n// Error implements the error interface\nfunc (e *APIError) Error() string {\n\treturn fmt.Sprintf("API error (status %d): %s", e.StatusCode, e.Message)\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"api-methods",children:"API Methods"}),"\n",(0,a.jsx)(n.p,{children:"Implement methods for interacting with the PayAngel API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// payangel/disbursement.go\npackage payangel\n\nimport (\n\t"fmt"\n\t"net/http"\n)\n\n// GetAccountBalance fetches the account balance\nfunc (c *Client) GetAccountBalance() (*AccountBalance, error) {\n\treq, err := c.createRequest(http.MethodGet, "/accounts/balance", nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string         `json:"status"`\n\t\tMessage string         `json:"message"`\n\t\tData    AccountBalance `json:"data"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &response.Data, nil\n}\n\n// CreateSingleDisbursement creates a single disbursement\nfunc (c *Client) CreateSingleDisbursement(data SingleDisbursementRequest) (*TransactionResponse, error) {\n\treq, err := c.createRequest(http.MethodPost, "/disbursements/single", data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string             `json:"status"`\n\t\tMessage string             `json:"message"`\n\t\tData    TransactionResponse `json:"data"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &response.Data, nil\n}\n\n// CreateBulkDisbursement creates a bulk disbursement\nfunc (c *Client) CreateBulkDisbursement(data BulkDisbursementRequest) (*BulkResponse, error) {\n\treq, err := c.createRequest(http.MethodPost, "/disbursements/bulk", data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string       `json:"status"`\n\t\tMessage string       `json:"message"`\n\t\tData    BulkResponse `json:"data"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &response.Data, nil\n}\n\n// GetTransactionStatus fetches the status of a transaction\nfunc (c *Client) GetTransactionStatus(transactionID string) (*TransactionResponse, error) {\n\tpath := fmt.Sprintf("/disbursements/%s", transactionID)\n\treq, err := c.createRequest(http.MethodGet, path, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string             `json:"status"`\n\t\tMessage string             `json:"message"`\n\t\tData    TransactionResponse `json:"data"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &response.Data, nil\n}\n\n// ListTransactions lists disbursement transactions\nfunc (c *Client) ListTransactions(page, limit int) ([]TransactionResponse, int, error) {\n\tpath := fmt.Sprintf("/disbursements?page=%d&limit=%d", page, limit)\n\treq, err := c.createRequest(http.MethodGet, path, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string `json:"status"`\n\t\tMessage string `json:"message"`\n\t\tData    struct {\n\t\t\tTotal        int                  `json:"total"`\n\t\t\tPage         int                  `json:"page"`\n\t\t\tLimit        int                  `json:"limit"`\n\t\t\tTransactions []TransactionResponse `json:"transactions"`\n\t\t} `json:"data"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t\n\treturn response.Data.Transactions, response.Data.Total, nil\n}\n\n// CancelTransaction cancels a pending transaction\nfunc (c *Client) CancelTransaction(transactionID string) error {\n\tpath := fmt.Sprintf("/disbursements/%s/cancel", transactionID)\n\treq, err := c.createRequest(http.MethodPost, path, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t\n\tvar response struct {\n\t\tStatus  string `json:"status"`\n\t\tMessage string `json:"message"`\n\t}\n\t\n\tif err := c.sendRequest(req, &response); err != nil {\n\t\treturn err\n\t}\n\t\n\treturn nil\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,a.jsx)(n.p,{children:"Create a main file to demonstrate using the PayAngel client:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// main.go\npackage main\n\nimport (\n\t"fmt"\n\t"log"\n\t"time"\n\t\n\t"github.com/yourusername/payangel-integration/payangel"\n)\n\nfunc main() {\n\t// Initialize the PayAngel client\n\tapiKey := "your_api_key_here" // Replace with your actual API key\n\tclient := payangel.NewClient(apiKey, "")\n\t\n\t// For sandbox environment\n\t// client := payangel.NewClient(apiKey, "https://sandbox-api.payangel.com/v1")\n\t\n\t// Check account balance\n\tbalance, err := client.GetAccountBalance()\n\tif err != nil {\n\t\tlog.Fatalf("Failed to get account balance: %v", err)\n\t}\n\tfmt.Printf("Account Balance: %.2f %s\\n", balance.Available, balance.Currency)\n\t\n\t// Create a single disbursement (bank transfer)\n\tbankTransfer, err := createBankTransfer(client)\n\tif err != nil {\n\t\tlog.Fatalf("Failed to create bank transfer: %v", err)\n\t}\n\tfmt.Printf("Bank Transfer Created - Transaction ID: %s, Status: %s\\n", \n\t\tbankTransfer.TransactionID, bankTransfer.Status)\n\t\n\t// Create a single disbursement (mobile money)\n\tmobileMoneyTransfer, err := createMobileMoneyTransfer(client)\n\tif err != nil {\n\t\tlog.Fatalf("Failed to create mobile money transfer: %v", err)\n\t}\n\tfmt.Printf("Mobile Money Transfer Created - Transaction ID: %s, Status: %s\\n", \n\t\tmobileMoneyTransfer.TransactionID, mobileMoneyTransfer.Status)\n\t\n\t// Create a bulk disbursement\n\tbulkResponse, err := createBulkTransfer(client)\n\tif err != nil {\n\t\tlog.Fatalf("Failed to create bulk transfer: %v", err)\n\t}\n\tfmt.Printf("Bulk Transfer Created - Batch ID: %s, Transactions: %d\\n", \n\t\tbulkResponse.BatchID, len(bulkResponse.Transactions))\n\t\n\t// Check transaction status\n\tif len(bulkResponse.Transactions) > 0 {\n\t\ttransactionID := bulkResponse.Transactions[0].TransactionID\n\t\tstatus, err := client.GetTransactionStatus(transactionID)\n\t\tif err != nil {\n\t\t\tlog.Printf("Failed to get transaction status: %v", err)\n\t\t} else {\n\t\t\tfmt.Printf("Transaction Status: %s\\n", status.Status)\n\t\t}\n\t}\n\t\n\t// List transactions\n\ttransactions, total, err := client.ListTransactions(1, 10)\n\tif err != nil {\n\t\tlog.Printf("Failed to list transactions: %v", err)\n\t} else {\n\t\tfmt.Printf("Total Transactions: %d\\n", total)\n\t\tfor i, tx := range transactions {\n\t\t\tfmt.Printf("%d. %s: %.2f %s (%s)\\n", i+1, tx.TransactionID, tx.Amount, tx.Currency, tx.Status)\n\t\t}\n\t}\n}\n\n// Create a bank transfer\nfunc createBankTransfer(client *payangel.Client) (*payangel.TransactionResponse, error) {\n\t// Generate a unique reference\n\treference := fmt.Sprintf("bank-transfer-%d", time.Now().Unix())\n\t\n\t// Prepare the request\n\trequest := payangel.SingleDisbursementRequest{\n\t\tReference:       reference,\n\t\tAmount:          1000.00,\n\t\tCurrency:        "GHS",\n\t\tSourceAccount:   "acc_123456789",\n\t\tDestinationType: "bank_account",\n\t\tRecipient: payangel.Recipient{\n\t\t\tName:          "John Doe",\n\t\t\tEmail:         "john.doe@example.com",\n\t\t\tPhone:         "+233501234567",\n\t\t\tBankCode:      "GH123456",\n\t\t\tAccountNumber: "1234567890",\n\t\t},\n\t\tNarration:   "Salary payment",\n\t\tCallbackURL: "https://your-website.com/webhooks/payangel",\n\t}\n\t\n\treturn client.CreateSingleDisbursement(request)\n}\n\n// Create a mobile money transfer\nfunc createMobileMoneyTransfer(client *payangel.Client) (*payangel.TransactionResponse, error) {\n\t// Generate a unique reference\n\treference := fmt.Sprintf("momo-transfer-%d", time.Now().Unix())\n\t\n\t// Prepare the request\n\trequest := payangel.SingleDisbursementRequest{\n\t\tReference:       reference,\n\t\tAmount:          500.00,\n\t\tCurrency:        "GHS",\n\t\tSourceAccount:   "acc_123456789",\n\t\tDestinationType: "mobile_money",\n\t\tRecipient: payangel.Recipient{\n\t\t\tName:          "Jane Smith",\n\t\t\tPhone:         "+233507654321",\n\t\t\tMobileNetwork: "MTN",\n\t\t\tMobileNumber:  "0507654321",\n\t\t},\n\t\tNarration:   "Commission payment",\n\t\tCallbackURL: "https://your-website.com/webhooks/payangel",\n\t}\n\t\n\treturn client.CreateSingleDisbursement(request)\n}\n\n// Create a bulk transfer\nfunc createBulkTransfer(client *payangel.Client) (*payangel.BulkResponse, error) {\n\t// Generate a unique batch reference\n\tbatchReference := fmt.Sprintf("batch-%d", time.Now().Unix())\n\t\n\t// Prepare transactions\n\ttransactions := []payangel.Transaction{\n\t\t{\n\t\t\tReference:       fmt.Sprintf("tx1-%d", time.Now().Unix()),\n\t\t\tAmount:          1000.00,\n\t\t\tCurrency:        "GHS",\n\t\t\tDestinationType: "bank_account",\n\t\t\tRecipient: payangel.Recipient{\n\t\t\t\tName:          "John Doe",\n\t\t\t\tEmail:         "john.doe@example.com",\n\t\t\t\tPhone:         "+233501234567",\n\t\t\t\tBankCode:      "GH123456",\n\t\t\t\tAccountNumber: "1234567890",\n\t\t\t},\n\t\t\tNarration: "Salary payment",\n\t\t},\n\t\t{\n\t\t\tReference:       fmt.Sprintf("tx2-%d", time.Now().Unix()),\n\t\t\tAmount:          500.00,\n\t\t\tCurrency:        "GHS",\n\t\t\tDestinationType: "mobile_money",\n\t\t\tRecipient: payangel.Recipient{\n\t\t\t\tName:          "Jane Smith",\n\t\t\t\tPhone:         "+233507654321",\n\t\t\t\tMobileNetwork: "MTN",\n\t\t\t\tMobileNumber:  "0507654321",\n\t\t\t},\n\t\t\tNarration: "Commission payment",\n\t\t},\n\t}\n\t\n\t// Prepare the request\n\trequest := payangel.BulkDisbursementRequest{\n\t\tBatchReference: batchReference,\n\t\tSourceAccount:  "acc_123456789",\n\t\tCallbackURL:    "https://your-website.com/webhooks/payangel",\n\t\tTransactions:   transactions,\n\t}\n\t\n\treturn client.CreateBulkDisbursement(request)\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"webhook-handler-with-gin-framework",children:"Webhook Handler (with Gin Framework)"}),"\n",(0,a.jsx)(n.p,{children:"Install the Gin web framework:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"go get github.com/gin-gonic/gin\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a webhook handler:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// webhook.go\npackage main\n\nimport (\n\t"crypto/hmac"\n\t"crypto/sha256"\n\t"encoding/hex"\n\t"encoding/json"\n\t"fmt"\n\t"io/ioutil"\n\t"log"\n\t"net/http"\n\n\t"github.com/gin-gonic/gin"\n)\n\n// WebhookPayload represents the webhook payload\ntype WebhookPayload struct {\n\tEvent string `json:"event"`\n\tData  struct {\n\t\tTransactionID string  `json:"transaction_id"`\n\t\tReference     string  `json:"reference"`\n\t\tStatus        string  `json:"status"`\n\t\tAmount        float64 `json:"amount"`\n\t\tCurrency      string  `json:"currency"`\n\t\tFailureReason string  `json:"failure_reason,omitempty"`\n\t} `json:"data"`\n}\n\n// verifySignature verifies the webhook signature\nfunc verifySignature(payload []byte, signature, secret string) bool {\n\th := hmac.New(sha256.New, []byte(secret))\n\th.Write(payload)\n\texpectedSignature := hex.EncodeToString(h.Sum(nil))\n\treturn hmac.Equal([]byte(expectedSignature), []byte(signature))\n}\n\nfunc startWebhookServer() {\n\trouter := gin.Default()\n\n\trouter.POST("/webhooks/payangel", func(c *gin.Context) {\n\t\t// Get the signature from headers\n\t\tsignature := c.GetHeader("X-PayAngel-Signature")\n\t\tif signature == "" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{"error": "Missing signature header"})\n\t\t\treturn\n\t\t}\n\n\t\t// Read the request body\n\t\tbody, err := ioutil.ReadAll(c.Request.Body)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{"error": "Failed to read request body"})\n\t\t\treturn\n\t\t}\n\n\t\t// Verify the signature\n\t\twebhookSecret := "your_webhook_secret_here" // Replace with your actual webhook secret\n\t\tif !verifySignature(body, signature, webhookSecret) {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid signature"})\n\t\t\treturn\n\t\t}\n\n\t\t// Parse the webhook payload\n\t\tvar payload WebhookPayload\n\t\tif err := json.Unmarshal(body, &payload); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{"error": "Failed to parse webhook payload"})\n\t\t\treturn\n\t\t}\n\n\t\t// Handle different event types\n\t\tswitch payload.Event {\n\t\tcase "disbursement.pending":\n\t\t\tlog.Printf("Transaction pending: %s", payload.Data.TransactionID)\n\t\tcase "disbursement.processing":\n\t\t\tlog.Printf("Transaction processing: %s", payload.Data.TransactionID)\n\t\tcase "disbursement.completed":\n\t\t\tlog.Printf("Transaction completed: %s", payload.Data.TransactionID)\n\t\t\t// Update your database or notify your users\n\t\tcase "disbursement.failed":\n\t\t\tlog.Printf("Transaction failed: %s, Reason: %s", \n\t\t\t\tpayload.Data.TransactionID, payload.Data.FailureReason)\n\t\t\t// Handle the failure\n\t\tdefault:\n\t\t\tlog.Printf("Unhandled event: %s", payload.Event)\n\t\t}\n\n\t\t// Acknowledge receipt of the webhook\n\t\tc.JSON(http.StatusOK, gin.H{"message": "Webhook received"})\n\t})\n\n\tport := 3000\n\tlog.Printf("Webhook server listening on port %d", port)\n\tif err := router.Run(fmt.Sprintf(":%d", port)); err != nil {\n\t\tlog.Fatalf("Failed to start webhook server: %v", err)\n\t}\n}\n\n// Import this function in main.go and call it to start the webhook server\n// go startWebhookServer() // Run in a separate goroutine\n'})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"Enhance error handling in your main application:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// error_handling.go\npackage main\n\nimport (\n\t"fmt"\n\t"log"\n\t\n\t"github.com/yourusername/payangel-integration/payangel"\n)\n\n// handleAPIError handles PayAngel API errors\nfunc handleAPIError(err error) {\n\tif apiErr, ok := err.(*payangel.APIError); ok {\n\t\tlog.Printf("API Error (Status %d): %s", apiErr.StatusCode, apiErr.Message)\n\t\t\n\t\t// Handle specific error codes\n\t\tswitch apiErr.StatusCode {\n\t\tcase 401:\n\t\t\tlog.Println("Authentication failed. Check your API key.")\n\t\tcase 400:\n\t\t\tlog.Println("Invalid request. Check your request parameters.")\n\t\t\t// Print individual field errors\n\t\t\tfor _, fieldErr := range apiErr.Errors {\n\t\t\t\tlog.Printf("Field Error: %s - %s", fieldErr.Field, fieldErr.Message)\n\t\t\t}\n\t\tcase 429:\n\t\t\tlog.Println("Rate limit exceeded. Please try again later.")\n\t\tcase 500:\n\t\t\tlog.Println("PayAngel server error. Please try again later.")\n\t\t}\n\t} else {\n\t\tlog.Printf("Unexpected error: %v", err)\n\t}\n}\n\n// Example usage\nfunc exampleWithErrorHandling(client *payangel.Client) {\n\tbalance, err := client.GetAccountBalance()\n\tif err != nil {\n\t\thandleAPIError(err)\n\t\treturn\n\t}\n\t\n\tfmt.Printf("Account Balance: %.2f %s\\n", balance.Available, balance.Currency)\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(n.p,{children:"Here's a recommended project structure for a Go application using the PayAngel API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"payangel-integration/\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 main.go                 # Main application entry point\n\u251c\u2500\u2500 webhook.go              # Webhook handler\n\u251c\u2500\u2500 error_handling.go       # Error handling utilities\n\u2514\u2500\u2500 payangel/\n    \u251c\u2500\u2500 client.go           # PayAngel API client\n    \u251c\u2500\u2500 types.go            # Type definitions\n    \u2514\u2500\u2500 disbursement.go     # Disbursement API methods\n"})})]})}function p(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(u,{...t})}):u(t)}}}]);