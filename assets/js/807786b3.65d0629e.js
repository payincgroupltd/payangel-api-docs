"use strict";(self.webpackChunkpayangel_api_docs=self.webpackChunkpayangel_api_docs||[]).push([[918],{887:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>o});var s=n(758);const i={},t=s.createContext(i);function d(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:r},e.children)}},4412:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api/errors","title":"API Errors","description":"This page provides information about the error codes and messages that may be returned by the PayAngel API.","source":"@site/docs/api/errors.md","sourceDirName":"api","slug":"/api/errors","permalink":"/payangel-api-docs/docs/api/errors","draft":false,"unlisted":false,"editUrl":"https://github.com/payincgroupltd/payangel-api-docs/tree/main/docs/api/errors.md","tags":[],"version":"current","frontMatter":{"id":"errors","title":"API Errors","sidebar_label":"Errors","slug":"/api/errors"},"sidebar":"apiSidebar","previous":{"title":"Java Examples","permalink":"/payangel-api-docs/docs/api/java/examples"},"next":{"title":"Webhooks","permalink":"/payangel-api-docs/docs/api/webhooks"}}');var i=n(6070),t=n(887);const d={id:"errors",title:"API Errors",sidebar_label:"Errors",slug:"/api/errors"},o="API Errors",l={},a=[{value:"Error Response Format",id:"error-response-format",level:2},{value:"HTTP Status Codes",id:"http-status-codes",level:2},{value:"Common Error Codes",id:"common-error-codes",level:2},{value:"Authentication Errors",id:"authentication-errors",level:3},{value:"Validation Errors",id:"validation-errors",level:3},{value:"Resource Errors",id:"resource-errors",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Error Handling Examples",id:"error-handling-examples",level:2},{value:"JavaScript / TypeScript",id:"javascript--typescript",level:3},{value:"Go",id:"go",level:3},{value:"Java",id:"java",level:3},{value:"Best Practices for Error Handling",id:"best-practices-for-error-handling",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"api-errors",children:"API Errors"})}),"\n",(0,i.jsx)(r.p,{children:"This page provides information about the error codes and messages that may be returned by the PayAngel API."}),"\n",(0,i.jsx)(r.h2,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,i.jsx)(r.p,{children:"Error responses from the PayAngel API follow a consistent format:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\n  "status": "error",\n  "message": "A human-readable error message",\n  "errors": [\n    {\n      "field": "The field that caused the error",\n      "message": "Specific error message for this field"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"status"}),': Always "error" for error responses']}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"message"}),": A general error message describing the problem"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"errors"}),": An array of specific validation errors, each with a ",(0,i.jsx)(r.code,{children:"field"})," and ",(0,i.jsx)(r.code,{children:"message"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"http-status-codes",children:"HTTP Status Codes"}),"\n",(0,i.jsx)(r.p,{children:"The PayAngel API uses standard HTTP status codes to indicate the success or failure of an API request."}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Status Code"}),(0,i.jsx)(r.th,{children:"Meaning"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"200"}),(0,i.jsx)(r.td,{children:"OK"}),(0,i.jsx)(r.td,{children:"The request was successful"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"400"}),(0,i.jsx)(r.td,{children:"Bad Request"}),(0,i.jsx)(r.td,{children:"The request was invalid or cannot be processed"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"401"}),(0,i.jsx)(r.td,{children:"Unauthorized"}),(0,i.jsx)(r.td,{children:"Authentication failed or was not provided"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"403"}),(0,i.jsx)(r.td,{children:"Forbidden"}),(0,i.jsx)(r.td,{children:"The authenticated user doesn't have permission"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"404"}),(0,i.jsx)(r.td,{children:"Not Found"}),(0,i.jsx)(r.td,{children:"The requested resource was not found"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"409"}),(0,i.jsx)(r.td,{children:"Conflict"}),(0,i.jsx)(r.td,{children:"The request conflicts with the current state"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"422"}),(0,i.jsx)(r.td,{children:"Unprocessable Entity"}),(0,i.jsx)(r.td,{children:"Validation error in the request"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"429"}),(0,i.jsx)(r.td,{children:"Too Many Requests"}),(0,i.jsx)(r.td,{children:"Rate limit exceeded"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"500"}),(0,i.jsx)(r.td,{children:"Internal Server Error"}),(0,i.jsx)(r.td,{children:"An error occurred on the server"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,i.jsx)(r.h3,{id:"authentication-errors",children:"Authentication Errors"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Error Code"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_api_key"})}),(0,i.jsx)(r.td,{children:"The API key provided is invalid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"expired_api_key"})}),(0,i.jsx)(r.td,{children:"The API key has expired"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"missing_api_key"})}),(0,i.jsx)(r.td,{children:"No API key was provided in the request"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Error Code"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"required_field"})}),(0,i.jsx)(r.td,{children:"A required field is missing"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_format"})}),(0,i.jsx)(r.td,{children:"The field value format is invalid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_amount"})}),(0,i.jsx)(r.td,{children:"The amount is invalid (e.g., negative, zero, or too large)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_currency"})}),(0,i.jsx)(r.td,{children:"The currency code is not supported"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_account"})}),(0,i.jsx)(r.td,{children:"The account number is invalid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_bank_code"})}),(0,i.jsx)(r.td,{children:"The bank code is invalid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_mobile_number"})}),(0,i.jsx)(r.td,{children:"The mobile number is invalid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"invalid_reference"})}),(0,i.jsx)(r.td,{children:"The reference is invalid or already used"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"resource-errors",children:"Resource Errors"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Error Code"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"transaction_not_found"})}),(0,i.jsx)(r.td,{children:"The specified transaction was not found"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"account_not_found"})}),(0,i.jsx)(r.td,{children:"The specified account was not found"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"insufficient_funds"})}),(0,i.jsx)(r.td,{children:"The source account has insufficient funds"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"recipient_not_found"})}),(0,i.jsx)(r.td,{children:"The recipient was not found"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Error Code"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"rate_limit_exceeded"})}),(0,i.jsx)(r.td,{children:"You have exceeded the API rate limit"})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"error-handling-examples",children:"Error Handling Examples"}),"\n",(0,i.jsx)(r.h3,{id:"javascript--typescript",children:"JavaScript / TypeScript"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"async function makeApiCall() {\n  try {\n    const response = await fetch('https://api.payangel.com/v1/disbursements/single', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer YOUR_API_KEY',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // Request data here\n      })\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      // Handle error response\n      console.error(`Error: ${data.message}`);\n      \n      if (data.errors) {\n        data.errors.forEach(error => {\n          console.error(`- ${error.field}: ${error.message}`);\n        });\n      }\n      \n      // Handle specific status codes\n      switch (response.status) {\n        case 401:\n          console.error('Authentication failed. Please check your API key.');\n          break;\n        case 422:\n          console.error('Validation error. Please check your input data.');\n          break;\n        case 429:\n          console.error('Rate limit exceeded. Please try again later.');\n          break;\n        // Handle other status codes\n      }\n      \n      return null;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Network error:', error);\n    return null;\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"go",children:"Go"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'func handleApiError(resp *http.Response) error {\n\t// Read response body\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf("error reading response body: %w", err)\n\t}\n\t\n\t// Parse error response\n\tvar errorResponse struct {\n\t\tStatus  string `json:"status"`\n\t\tMessage string `json:"message"`\n\t\tErrors  []struct {\n\t\t\tField   string `json:"field"`\n\t\t\tMessage string `json:"message"`\n\t\t} `json:"errors"`\n\t}\n\t\n\tif err := json.Unmarshal(body, &errorResponse); err != nil {\n\t\treturn fmt.Errorf("error parsing error response: %w", err)\n\t}\n\t\n\t// Build error message\n\terrorMsg := fmt.Sprintf("API error (%d): %s", resp.StatusCode, errorResponse.Message)\n\t\n\t// Add specific field errors if available\n\tif len(errorResponse.Errors) > 0 {\n\t\terrorMsg += ". Fields:"\n\t\tfor _, fieldError := range errorResponse.Errors {\n\t\t\terrorMsg += fmt.Sprintf(" %s: %s;", fieldError.Field, fieldError.Message)\n\t\t}\n\t}\n\t\n\treturn errors.New(errorMsg)\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"java",children:"Java"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'private void handleApiError(Response response) throws IOException {\n    ResponseBody errorBody = response.body();\n    if (errorBody == null) {\n        throw new ApiException("Unknown error occurred", response.code(), null);\n    }\n    \n    String errorBodyString = errorBody.string();\n    ObjectMapper objectMapper = new ObjectMapper();\n    \n    try {\n        JsonNode rootNode = objectMapper.readTree(errorBodyString);\n        String message = rootNode.path("message").asText("Unknown error");\n        \n        List<FieldError> fieldErrors = new ArrayList<>();\n        JsonNode errorsNode = rootNode.path("errors");\n        if (errorsNode.isArray()) {\n            for (JsonNode errorNode : errorsNode) {\n                String field = errorNode.path("field").asText();\n                String fieldMessage = errorNode.path("message").asText();\n                fieldErrors.add(new FieldError(field, fieldMessage));\n            }\n        }\n        \n        throw new ApiException(message, response.code(), fieldErrors);\n    } catch (JsonProcessingException e) {\n        throw new ApiException("Failed to parse error response", response.code(), null);\n    }\n}\n\npublic class ApiException extends Exception {\n    private final int statusCode;\n    private final List<FieldError> fieldErrors;\n    \n    public ApiException(String message, int statusCode, List<FieldError> fieldErrors) {\n        super(message);\n        this.statusCode = statusCode;\n        this.fieldErrors = fieldErrors;\n    }\n    \n    // Getters\n}\n\npublic class FieldError {\n    private final String field;\n    private final String message;\n    \n    public FieldError(String field, String message) {\n        this.field = field;\n        this.message = message;\n    }\n    \n    // Getters\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices-for-error-handling",children:"Best Practices for Error Handling"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Always check for error responses"})," - Don't assume the API call will succeed"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Log detailed error information"})," - Include the error code, message, and field errors"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Handle specific error cases"})," - Some errors may require specific handling (e.g., retry on rate limit)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Show user-friendly messages"})," - Translate API errors into user-friendly messages"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Implement exponential backoff"})," - For rate limit errors, implement exponential backoff"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);